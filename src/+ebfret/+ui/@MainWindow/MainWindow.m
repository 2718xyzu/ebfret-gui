classdef MainWindow < hgsetget
    properties
        % holds references to ui elements contained in main window
        handles 
        % stores variables relating to gui state
        status
        % holds time series data for currently loaded dataset
        series 
        % holds analysis data for currently loaded dataset
        analysis
        % holds plot data
        plots
    end
    methods
        function self = MainWindow(series, analysis, varargin)
            handles.mainWindow ...
                = figure('name', 'ebFRET', ...
                         'units','pixels', ...
                         'position', [200 200 1000 700], ...
                         'color', [0.95 0.95 0.95], ...
                         'menubar', 'none', ... 
                         'numbertitle','off', ...
                         'resize','on');

            % set some defaults
            set(handles.mainWindow, ...
                'DefaultUIPanelBackGroundColor', [0.95 0.95 0.95], ...
                'DefaultUIControlUnits', 'normalized', ...
                'DefaultAxesLooseInset', [0.00, 0, 0, 0], ... 
                'DefaultAxesUnits', 'normalized');

            % horizontal and vertical padding and button height (normalized units)
            pos = getpixelposition(handles.mainWindow);
            hp = 4 / pos(3);
            vp = 4 / pos(4);
            bh = 36 / pos(4);

            % initialize ui elements
            handles.seriesPanel ...
                = ebfret.ui.PlotPanel(...
                    'parent', handles.mainWindow, ...
                    'title', 'Time Series', ...
                    'position', [hp, 0.40+2*vp+bh, 1-2*hp, 0.60-3*vp-bh], ...
                    'axes', {'time', [hp, 0.5+4*vp, 1-2*hp, 0.5-6*vp], ...
                             'obs', [4*hp, 2*vp, 0.25-2*hp 0.5-2*vp], ...
                             'mean', [0.25+3*hp, 2*vp, 0.25-2*hp, 0.5-2*vp], ...
                             'noise', [0.50+2*hp 2*vp, 0.25-2*hp, 0.5-2*vp], ...
                             'dwell', [0.75+hp, 2*vp, 0.25-2*hp, 0.5-2*vp]});
            handles.ensemblePanel ...
                = ebfret.ui.PlotPanel(...
                    'parent', handles.mainWindow, ...
                    'title', 'Ensemble', ...
                    'position', [hp, 2*vp+bh, 1-2*hp, 0.40-3*vp-bh], ...
                    'axes', {'obs', [4*hp, 2*vp, 0.25-2*hp 1-4*vp], ...
                             'mean', [0.25+3*hp, 2*vp, 0.25-2*hp, 1-4*vp], ...
                             'noise', [0.50+2*hp 2*vp, 0.25-2*hp, 1-4*vp], ...
                             'dwell', [0.75+hp, 2*vp, 0.25-2*hp, 1-4*vp]});
            set(self, 'handles', handles);
            handles.seriesControl ...
                = ebfret.ui.IndexControl(...
                    'parent', handles.mainWindow, ...
                    'parent_callback', @(n) refresh_series(self, n), ...
                    'position', [hp, 0.40+vp, 1-2*hp, bh]);
            handles.ensembleControl ...
                = ebfret.ui.IndexControl(...
                    'parent', handles.mainWindow, ...
                    'parent_callback', @(a) refresh_ensemble(self, a), ...
                    'position', [hp, vp, 1-2*hp, bh]);

            % file menu
            handles.menu.file ...
                = uimenu(handles.mainWindow, 'label', 'File');
            handles.menu.fileLoad ...
                = uimenu(handles.menu.file, 'label', 'Load');
            handles.menu.fileSave ...
                = uimenu(handles.menu.file, 'label', 'Save');
            handles.menu.fileSaveAs ...
                = uimenu(handles.menu.file, 'label', 'Save As');
            handles.menu.fileExport ...
                = uimenu(handles.menu.file, 'label', 'Export');
            handles.menu.fileExit ...
                = uimenu(handles.menu.file, 'label', 'Exit');

            % analysis menu
            handles.menu.analysis ...
                = uimenu(handles.mainWindow, 'label', 'Analysis');
            handles.menu.analysisPreprocessing ...
                = uimenu(handles.menu.analysis, 'label', 'Pre-Processing');
            handles.menu.analysisInitialization ...
                = uimenu(handles.menu.analysis, 'label', 'Initialization');
            handles.menu.analysisVariationalBayes ...
                = uimenu(handles.menu.analysis, 'label', 'Variational Bayes');
            handles.menu.analysisEmpiricalBayes ...
                = uimenu(handles.menu.analysis, 'label', 'Emprical Bayes');

            % plot menu
            handles.menu.plot ...
                = uimenu(handles.mainWindow, 'label', 'Plot');

            set(self, 'handles', handles);

            % set menu callbacks
            set(handles.menu.fileLoad, ...
                'callback', @(source, event) load_data(self));
            set(handles.menu.fileSave, ...
                'callback', @(source, event) save_data(self));

            % assign data
            set(self, 'series', struct([])); 
            set(self, 'analysis', struct([])); 

            % set default axes properties
            default_props.NextPlot = 'add';
            default_props.Box = 'on';
            props = struct('time', default_props, ...
                           'obs', default_props, ...
                           'mean', default_props, ...
                           'noise', default_props, ...
                           'dwell', default_props);

            % remove y tick labels on all but time axis
            fields = {'obs', 'mean', 'noise', 'dwell'};
            for f = 1:length(fields)
                props.(fields{f}).YTickLabel = {};
            end

            % set axes properties
            set_props(handles.seriesPanel, props);
            set_props(handles.ensemblePanel, rmfield(props, 'time'));

            % set initial analysis and time series
            status.cur_series = 0;
            status.cur_analysis = 0;
            set(self, 'status', status);

            % set default time series plot colors
            plots.colors.obs = [0.4, 0.4, 0.4];
            plots.colors.viterbi = [0.66, 0.33, 0.33];
            set(self, 'plots', plots);
        end
        refresh_series(self, n);
        refresh_ensemble(self, a);
        load_data(self);
        save_data(self);
    end
end
